import pointers
import sys
def print_separator(title=""):
    print("\n" + "="*60)
    if title:
        print(f" {title} ")
        print("="*60)
    print()
def test_basic_pointer():
    print_separator("basic Pointer Operations")
    value = 42
    ptr = pointers.Pointer(value)
    print(f"original value: {value}")
    print(f"python object ID: {id(value)}")
    print(f"pointer's own address: 0x{ptr.address():016x}")
    print(f"address pointer points to: 0x{ptr.value_address():016x}")
    print(f"dereferenced value: {ptr.dereference()}")
    print(f"addresses match: {ptr.value_address() == id(value)}")
def test_malloc_and_raw_memory():
    print_separator(",emory Allocation and Raw Access")
    ptr = pointers.Pointer.malloc(16)
    print(f"allocated 16 bytes at: 0x{ptr.value_address():016x}")
    print("\nwriting integers to memory:")
    ptr.write_int(0x12345678, 4)
    ptr.add(4).write_int(0x9ABCDEF0, 4)
    ptr.add(8).write_int(0xDEADBEEF, 4)
    print("reading back:")
    val1 = ptr.read_int(4)
    val2 = ptr.add(4).read_int(4)
    val3 = ptr.add(8).read_int(4)
    print(f"  position 0: 0x{val1:08x}")
    print(f"  position 4: 0x{val2:08x}")
    print(f"  position 8: 0x{val3:08x}")
    raw_bytes = ptr.read_bytes(12)
    print(f"\nraw bytes: {raw_bytes.hex()}")
    ptr.add(12).write_bytes(b'\xCA\xFE\xBA\xBE')
    final_bytes = ptr.read_bytes(16)
    print(f"after writing CAFEBABE: {final_bytes.hex()}")
    ptr.free()
    print("\nmemory freed successfully")
def test_pointer_arithmetic():
    print_separator("pointer Arithmetic")
    original_ptr = pointers.Pointer.malloc(16)
    ptr = original_ptr.cast(4)
    print("writing array [10, 20, 30, 40]:")
    for i, value in enumerate([10, 20, 30, 40]):
        element_ptr = ptr.add(i)
        element_ptr.write_int(value, 4)
        print(f"  arr[{i}] = {value} at 0x{element_ptr.value_address():016x}")
    print("\nreading back with pointer arithmetic:")
    for i in range(4):
        element_ptr = ptr.add(i)
        value = element_ptr.read_int(4)
        print(f"  arr[{i}] = {value}")
    print("\nbyte-by-byte view:")
    byte_ptr = ptr.cast(1)
    for i in range(16):
        byte_val = byte_ptr.add(i).read_int(1)
        print(f"  byte {i:2d}: 0x{byte_val:02x}")
    original_ptr.free()
def test_from_address():
    print_separator("creating Pointers from Raw Addresses")
    text = "greg"
    text_id = id(text)
    print(f"original string: '{text}'")
    print(f"string object address: 0x{text_id:016x}")
    ptr_from_addr = pointers.Pointer.from_address(text_id)
    print(f"created pointer from address: 0x{ptr_from_addr.value_address():016x}")
    print("\nworking with malloc'd memory:")
    original_ptr = pointers.Pointer.malloc(8)
    original_ptr.write_int(0x1234567890ABCDEF, 8)
    addr = original_ptr.value_address()
    print(f"original pointer at: 0x{addr:016x}")
    alias_ptr = pointers.Pointer.from_address(addr, 8)
    value = alias_ptr.read_int(8)
    print(f"reading through alias: 0x{value:016x}")
    alias_ptr.write_int(0x7EDCBA0987654321, 8)
    new_value = original_ptr.read_int(8)
    print(f"original pointer now reads: 0x{new_value:016x}")
    original_ptr.free()
def test_different_data_types():
    print_separator("different Data Types")
    ptr = pointers.Pointer.malloc(16)
    print("testing different integer sizes:")
    ptr.write_int(255, 1)
    val = ptr.read_int(1)
    print(f"  8-bit:  255 -> {val}")
    ptr.write_int(65535, 2)
    val = ptr.read_int(2)
    print(f"  16-bit: 65535 -> {val}")
    ptr.write_int(0x12345678, 4)
    val = ptr.read_int(4)
    print(f"  32-bit: 0x12345678 -> 0x{val:08x}")
    ptr.write_int(0x123456789ABCDEF0, 8)
    val = ptr.read_int(8)
    print(f"  64-bit: 0x123456789ABCDEF0 -> 0x{val:016x}")
    print("\ntesting pointer casting:")
    byte_ptr = ptr.cast(1)
    print(f"original pointer size: {ptr.size}")
    print(f"cast to byte pointer size: {byte_ptr.size}")
    ptr.free()
def test_string_manipulation():
    print_separator("string Manipulation in Memory")
    message = b"greg"
    ptr = pointers.Pointer.malloc(len(message) + 1)
    ptr.write_bytes(message + b'\0')
    read_bytes = ptr.read_bytes(len(message) + 1)
    print(f"stored string: {read_bytes[:-1].decode()}")
    world_ptr = ptr.add(7)
    world_ptr.write_bytes(b"World!\0")
    modified = ptr.read_bytes(len(message))
    print(f"modified string: {modified.rstrip(b'\0').decode()}")
    ptr.free()
def test_error_handling():
    print_separator("error Handling")
    print("testing various error conditions:")
    ptr = pointers.Pointer()
    try:
        ptr.read_int()
        print("error: should have failed on null pointer read")
    except ValueError as e:
        print(f"null pointer read correctly failed: {e}")
    try:
        pointers.Pointer.malloc(0)
        print("error: should have failed on zero size malloc")
    except ValueError as e:
        print(f"zero size malloc correctly failed: {e}")
    ptr = pointers.Pointer.malloc(8)
    try:
        ptr.read_int(3)
        print("error: should have failed on invalid int size")
    except ValueError as e:
        print(f"invalid int size correctly failed: {e}")
    try:
        ptr2 = ptr.add(1)
        ptr2.free()
        print("error: should have failed freeing non-owned memory")
    except ValueError as e:
        print(f"non-owned memory free correctly failed: {e}")
    ptr.free()
def main():
    print("testing pointers")
    print(f"python version: {sys.version}")
    print(f"pointer size: {sys.getsizeof(0)} bytes")
    test_basic_pointer()
    test_malloc_and_raw_memory()
    test_pointer_arithmetic()
    test_from_address()
    test_different_data_types()
    test_string_manipulation()
    test_error_handling()
    print_separator("everything worked")
if __name__ == "__main__":
    main()
